name: Mahezza Android CI/CD for Release

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - master

jobs:
  lint:
    name: Lint Checks
    runs-on:
      - ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Gradle clean
        run: ./gradlew clean

      - name: Run lint
        run: ./gradlew lint

      - name: Upload html test report
        uses: actions/upload-artifact@v3
        with:
          name: lint-report
          path: app/build/reports/lint-results-debug.html

      - name: Notify to Slack
        run: |
          if [[ -n "$GITHUB_EVENT_PULL_REQUEST_TITLE" ]]; then
            message="pull request title: $GITHUB_EVENT_PULL_REQUEST_TITLE"
          elif [[ -n "$GITHUB_EVENT_HEAD_COMMIT_MESSAGE" ]]; then
            message="commit message $GITHUB_EVENT_HEAD_COMMIT_MESSAGE"
          else
            message="No commit or pull request message found."
          fi

          job_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          curl -X POST -H 'Content-type: application/json' --data '{"text":"'"${{ github.job }} at ${{github.workflow}} with $message is ${{ job.status }}. See the detail here $job_url"'"}' ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          GITHUB_EVENT_PULL_REQUEST_TITLE: ${{ github.event.pull_request.title }}
          GITHUB_EVENT_HEAD_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        if: always()

  unit-test:
    name: Unit Tests
    needs: [lint]
    runs-on:
      - ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Run Unit tests
        run: ./gradlew test --stacktrace

      - name: Notify to Slack
        run: |
          if [[ -n "$GITHUB_EVENT_PULL_REQUEST_TITLE" ]]; then
            message="pull request title: $GITHUB_EVENT_PULL_REQUEST_TITLE"
          elif [[ -n "$GITHUB_EVENT_HEAD_COMMIT_MESSAGE" ]]; then
            message="commit message $GITHUB_EVENT_HEAD_COMMIT_MESSAGE"
          else
            message="No commit or pull request message found."
          fi

          job_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          curl -X POST -H 'Content-type: application/json' --data '{"text":"'"${{ github.job }} at ${{github.workflow}} with $message is ${{ job.status }}. See the detail here $job_url"'"}' ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          GITHUB_EVENT_PULL_REQUEST_TITLE: ${{ github.event.pull_request.title }}
          GITHUB_EVENT_HEAD_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        if: always()

  instrumentation-test:
    name: Instrumentation Tests
    needs: [unit-test]
    runs-on:
      - macos-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'adopt'
          cache: 'gradle'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Run instrumented tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          arch: x86_64
          script: ./gradlew connectedCheck --stacktrace

      - name: Upload test report
        uses: actions/upload-artifact@v2
        with:
          name: instrumentation_test_report
          path: app/build/reports/androidTests/connected/

      - name: Notify to Slack
        run: |
          if [[ -n "$GITHUB_EVENT_PULL_REQUEST_TITLE" ]]; then
            message="pull request title: $GITHUB_EVENT_PULL_REQUEST_TITLE"
          elif [[ -n "$GITHUB_EVENT_HEAD_COMMIT_MESSAGE" ]]; then
            message="commit message $GITHUB_EVENT_HEAD_COMMIT_MESSAGE"
          else
            message="No commit or pull request message found."
          fi

          job_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          curl -X POST -H 'Content-type: application/json' --data '{"text":"'"${{ github.job }} at ${{github.workflow}} with $message is ${{ job.status }}. See the detail here $job_url"'"}' ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          GITHUB_EVENT_PULL_REQUEST_TITLE: ${{ github.event.pull_request.title }}
          GITHUB_EVENT_HEAD_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        if: always()

  apk-debug:
    name: Generate APK Debug
    needs: [unit-test]
    runs-on:
      - ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Assemble app debug APK
        run: bash ./gradlew assembleDebug --stacktrace

      - name: Upload app debug APK
        uses: actions/upload-artifact@v3
        with:
          name: app-debug
          path: app/build/outputs/apk/debug/app-debug.apk

      - name: Assemble Android Instrumentation Tests
        run: bash ./gradlew assembleDebugAndroidTest

      - name: Upload Android Test APK
        uses: actions/upload-artifact@v3
        with:
          name: app-debug-androidTest
          path: app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk

      - name: Notify to Slack
        run: |
          if [[ -n "$GITHUB_EVENT_PULL_REQUEST_TITLE" ]]; then
            message="pull request title: $GITHUB_EVENT_PULL_REQUEST_TITLE"
          elif [[ -n "$GITHUB_EVENT_HEAD_COMMIT_MESSAGE" ]]; then
            message="commit message $GITHUB_EVENT_HEAD_COMMIT_MESSAGE"
          else
            message="No commit or pull request message found."
          fi

          job_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          curl -X POST -H 'Content-type: application/json' --data '{"text":"'"${{ github.job }} at ${{github.workflow}} with $message is ${{ job.status }}. See the detail here $job_url"'"}' ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          GITHUB_EVENT_PULL_REQUEST_TITLE: ${{ github.event.pull_request.title }}
          GITHUB_EVENT_HEAD_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        if: always()

  firebase-testlab:
    name: Run UI tests with Firebase Test Lab
    needs: apk-debug
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download app APK
        uses: actions/download-artifact@v1
        with:
          name: app-debug

      - name: Download Android test APK
        uses: actions/download-artifact@v1
        with:
          name: app-debug-androidTest

      - name: Authenticate with Google Cloud
        id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: ${{ secrets.GCLOUD_AUTH }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Set current project
        run: gcloud config set project ${{ secrets.FIREBASE_PROJECT_ID }}

      - name: Run Instrumentation Tests in Firebase Test Lab
        run: gcloud firebase test android run --type instrumentation --app app-debug/app-debug.apk --test app-debug-androidTest/app-debug-androidTest.apk --device model=Pixel2,version=28,locale=pl,orientation=portrait

      - name: Notify to Slack
        run: |
          if [[ -n "$GITHUB_EVENT_PULL_REQUEST_TITLE" ]]; then
            message="pull request title: $GITHUB_EVENT_PULL_REQUEST_TITLE"
          elif [[ -n "$GITHUB_EVENT_HEAD_COMMIT_MESSAGE" ]]; then
            message="commit message $GITHUB_EVENT_HEAD_COMMIT_MESSAGE"
          else
            message="No commit or pull request message found."
          fi

          job_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          curl -X POST -H 'Content-type: application/json' --data '{"text":"'"${{ github.job }} at ${{github.workflow}} with $message is ${{ job.status }}. See the detail here $job_url"'"}' ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          GITHUB_EVENT_PULL_REQUEST_TITLE: ${{ github.event.pull_request.title }}
          GITHUB_EVENT_HEAD_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        if: always()

  build:
    name: Build and Sign APK
    needs: [instrumentation-test, firebase-testlab]
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Build APK
        id: build
        run: bash ./gradlew assembleRelease

      - name: Sign APK
        id: sign_apk
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNINGKEYBASE64 }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEYSTOREPASSWORD }}
          keyPassword: ${{ secrets.KEYPASSWORD }}

      - name: Make artifact
        uses: actions/upload-artifact@v2
        with:
          name: app-release-signed
          path: ${{steps.sign_apk.outputs.signedReleaseFile}}

      - name: Build AAB
        run: bash ./gradlew bundleRelease

      - name: Sign AAB
        id: sign_aab
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/bundle/release
          signingKeyBase64: ${{ secrets.SIGNINGKEYBASE64 }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEYSTOREPASSWORD }}
          keyPassword: ${{ secrets.KEYPASSWORD }}

      - name: Make artifact
        uses: actions/upload-artifact@v2
        with:
          name: app-release-signed
          path: ${{steps.sign_aab.outputs.signedReleaseFile}}

      - name: Get Tag
        if: startsWith(github.ref, 'refs/tags/')
        id: var
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Build Changelog
        if: startsWith(github.ref, 'refs/tags/')
        id: changelog
        uses: ardalanamini/auto-changelog@v3
        with:
          mention-authors: false
          mention-new-contributors: false
          include-compare: false
          semver: false

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1
        with:
          _name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ steps.changelog.outputs.changelog }} &#x20;
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Upload APK
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{steps.sign_apk.outputs.signedReleaseFile}}
          asset_name: app-release-signed-${{ steps.var.outputs.tag }}.apk
          asset_content_type: application/zip

      - name: Upload AAB
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{steps.sign_aab.outputs.signedReleaseFile}}
          asset_name: app-release-signed-${{ steps.var.outputs.tag }}.aab
          asset_content_type: application/zip

      - name: Notify to Slack
        run: |
          if [[ -n "$GITHUB_EVENT_PULL_REQUEST_TITLE" ]]; then
            message="pull request title: $GITHUB_EVENT_PULL_REQUEST_TITLE"
          elif [[ -n "$GITHUB_EVENT_HEAD_COMMIT_MESSAGE" ]]; then
            message="commit message $GITHUB_EVENT_HEAD_COMMIT_MESSAGE"
          else
            message="No commit or pull request message found."
          fi

          job_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          curl -X POST -H 'Content-type: application/json' --data '{"text":"'"${{ github.job }} at ${{github.workflow}} with $message is ${{ job.status }}. See the detail here $job_url"'"}' ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          GITHUB_EVENT_PULL_REQUEST_TITLE: ${{ github.event.pull_request.title }}
          GITHUB_EVENT_HEAD_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        if: always()